<!-- ANT_UNITTEST_SCRIPT (do not remove) -->
<project name="${natural.ant.project.name}" default="unittest" basedir=".">
        
  <target name="help"
          description="shows a help screen">
    <!-- display help screen -->
    <echo message="ANT Natural Unit Test utility"/>
    <echo message=" "/>
    <echo message="  This utility performs the processing of Natural Unit Tests."/>
    <echo message=" "/>
    <echo message="  The following targets are available:"/>
    <echo message="    checkout               do initial repository checkout"/>
    <echo message="                           of the specified project resources"/>
    <echo message="    unittest               initiate the unit test process (default)"/>
    <echo message=" "/> 
  </target>
  
  <target name="-setProperties">
    <!-- Property logic: DO NOT EDIT NOR REMOVE -->
    <!-- ### ANT_DEPLOY_PROPERTIES_START ### -->
    <property environment="env"/>
    <property name="natural.testing.ant.rpcpwd" value="" />
    <property name="natural.testing.ant.file.name" value="unitTest914.xml" />
    <property name="natural.ant.project.rootdir" value="." />
    <property name="natural.testing.ant.logon" value="YES" />
    <property name="natural.ant.project.steplibs" value="ACSILTGA;ASSILTGA;CSSILSYS;SYSTEM;SYSEXT;SYSTEM;_ASSILTGA;CSSILSYS;SYSTEM;SYSIDL;SYSRPC;SYSLIBS;SYSTEM;_NTDEVOPS;SYSTEM;SYSTEM;_" />
    <property name="natural.ant.project.name" value="GISSPoCNatDevOps" />
    <property name="natural.ant.failonerror" value="NO" />
    <property name="natural.ant.repository.password" value="" />
    <property name="natural.testing.ant.exxpwd" value="" />
    <property name="natural.ant.repository.access.method" value=":pserver:" />
    <property name="natural.testing.ant.rpcenvname" value="Natural RPC Server (Proxys)" />
    <property name="natural.testing.ant.rpcuid" value="" />
    <property name="natural.testing.ant.brokerid" value="" />
    <property name="natural.testing.ant.exxuid" value="" />
    <property name="natural.ant.project.password.encryption" value="YES" />
    <property name="natural.ant.repository.url" value="https://github.com/RaulDeVicente/PoCNatDevOps.git" />
    <property name="NaturalTestingJunitLogger.file" value="logUnitTest.xml" />
    <property name="natural.ant.repository.module" value="GISSPoCNatDevOps" />
    <property name="natural.ant.repository.version" value="main" />
    <property name="natural.testing.ant.srvaddr" value="" />
    <property name="natural.ant.repository.type" value="GIT" />
    <property name="natural.ant.repository.username" value="" />
    <property name="natural.testing.ant.writehistory" value="YES" />
    <property name="natural.ant.referenced.projects" value="" />
    <!-- ### ANT_DEPLOY_PROPERTIES_END ###   -->
  </target>
	
	
	<target name="-initProperties">
	    <!-- set some property values based on other loaded properties -->

	    <!-- set repository properties -->    
	    <condition property="natural.ant.repository.type.svn" value="yes">
	      <or>
	        <equals arg1="${natural.ant.repository.type}" arg2="SVN"/>
	        <equals arg1="${natural.ant.repository.type}" arg2="svn"/>
	      </or>
	    </condition>
	    <condition property="natural.ant.repository.type.cvs" value="yes">
	      <or>
	        <equals arg1="${natural.ant.repository.type}" arg2="CVS"/>
	        <equals arg1="${natural.ant.repository.type}" arg2="cvs"/>
	      </or>
	    </condition>  
	    <condition property="natural.ant.repository.type.git" value="yes">
	      <or>
	        <equals arg1="${natural.ant.repository.type}" arg2="GIT"/>
	        <equals arg1="${natural.ant.repository.type}" arg2="git"/>
	      </or>
	    </condition>  
	    <condition property="natural.ant.failonerror.internal" value="true" else="false">
	      <or>
	        <equals arg1="${natural.ant.failonerror}" arg2="yes"/>
	        <equals arg1="${natural.ant.failonerror}" arg2="YES"/>
	      </or>
	    </condition>  
	    <property name="natural.ant.tstamp.format" value="HH:mm:ss.SSS"/>
	    
	    <condition property="is.eclipse.git" value="yes">
	      <and>
	        <isset property="natural.eclipse.running"/>
	        <isset property="natural.ant.repository.type.git"/>
	      </and>
	    </condition>  
	    <condition property="is.no.eclipse.git" value="yes">
	      <and>
	        <not>
	          <isset property="natural.eclipse.running"/>
	        </not>
	        <isset property="natural.ant.repository.type.git"/>
	      </and>
	    </condition>  
	    <condition property="is.eclipse.no.git" value="yes">
	      <and>
	        <isset property="natural.eclipse.running"/>
	        <not>
	          <isset property="natural.ant.repository.type.git"/>
	        </not>
	      </and>
	    </condition>  
	    <condition property="is.no.eclipse.no.git" value="yes">
	      <and>
	        <not>
	          <isset property="natural.eclipse.running"/>
	        </not>
	        <not>
	          <isset property="natural.ant.repository.type.git"/>
	        </not>
	      </and>
	    </condition>  
	</target>
	  
	
  
  <target name="-setRootdir" depends="-setRootdirEclipse,-setRootdirNoEclipse">
    <!-- set the rootdir -->
    <mkdir dir="${natural.ant.project.rootdir.active}"/>
    <available file="${natural.ant.project.rootdir.active}" type="dir"
               property="temp.natural.ant.project.rootdir.active.exists"/>
    <fail unless="temp.natural.ant.project.rootdir.active.exists" 
          message="ERROR: Root directory '${natural.ant.project.rootdir.active}' does not exist."/>    
    <echo message="INFO: Using root directory '${natural.ant.project.rootdir.active}'"/>
  </target>

  <target name="-setRootdirEclipse" depends="-setRootdirEclipseGit,-setRootdirEclipseNoGit"
  	        if="natural.eclipse.running">
    <!-- set the rootdir in case of running inside Eclipse -->
  </target>

  <target name="-setRootdirEclipseGit" if="is.eclipse.git">
    <!-- set the rootdir in case of running inside Eclipse with Git -->
    <property name="natural.ant.project.rootdir.active" value=".."/>
    <property name="natural.ant.project.rootdir.references" value="../.."/>
  </target>

  <target name="-setRootdirEclipseNoGit" if="is.eclipse.no.git">
    <!-- set the rootdir in case of running inside Eclipse without Git -->
    <property name="natural.ant.project.rootdir.active" value=".."/>
    <property name="natural.ant.project.rootdir.references" value=".."/>
  </target>
 
  <target name="-setRootdirNoEclipse" depends="-setRootdirNoEclipseGit,-setRootdirNoEclipseNoGit" 
         unless="natural.eclipse.running">
    <!-- set the rootdir in case of running outside Eclipse -->
  </target>

  <target name="-setRootdirNoEclipseGit" if="is.no.eclipse.git">
    <!-- set the rootdir in case of running outside Eclipse with Git -->
    <property name="natural.ant.project.rootdir.active" value="${natural.ant.project.rootdir}/${natural.ant.project.name}"/>
    <property name="natural.ant.project.rootdir.references" value="${natural.ant.project.rootdir}"/>
  </target>

  <target name="-setRootdirNoEclipseNoGit" if="is.no.eclipse.no.git">
    <!-- set the rootdir in case of running outside Eclipse without Git -->
    <property name="natural.ant.project.rootdir.active" value="${natural.ant.project.rootdir}"/>
    <property name="natural.ant.project.rootdir.references" value="${natural.ant.project.rootdir}"/>
  </target>

  <target name="-checkProjectdir">
    <!-- check projectdir for validity -->
    <available file="${natural.ant.project.rootdir.active}/${natural.ant.project.name}" type="dir"
               property="temp.natural.ant.project.rootdir.project.exists"/>
    <fail unless="temp.natural.ant.project.rootdir.project.exists" 
          message="ERROR: Project '${natural.ant.project.name}' does not exist in root directory '${natural.ant.project.rootdir.active}'"/>
    <echo message="INFO: Using project '${natural.ant.project.name}' in root directory '${natural.ant.project.rootdir.active}'"/>
  </target>

  <path id="natural.ant.searchpath">
    <pathelement location="${natural.eclipse.bundle.location}/com.softwareag.natural.unittest.ant/bin"/>
    <pathelement location="${natural.eclipse.bundle.location}/com.softwareag.natural.unittest.core/bin"/>  	
  	<pathelement location="${natural.eclipse.bundle.location}/com.thoughtworks.xstream/bin"/>
    <pathelement path="${classpath}"/>
    <sort>
      <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
        <date/>
      </reverse>
      <fileset dir="${natural.eclipse.home}" erroronmissingdir="false">
      	<include name="plugins/com.softwareag.naturalone.natural.ant*.jar"/>
      	<include name="plugins/com.softwareag.naturalone.natural.auxiliary*.jar"/>
        <include name="plugins/com.softwareag.entirex.ide.eclipse.entirex.ui*.jar"/>
        <include name="plugins/com.softwareag.entirex.runtime*.jar"/>
        <include name="plugins/com.softwareag.entirex.core*.jar"/>
        <include name="plugins/org.apache.log4j*.jar"/>
        <include name="plugins/com.softwareag.natural.unittest.ant*.jar"/>
        <include name="plugins/com.softwareag.natural.unittest.core*.jar"/>
      	<include name="plugins/com.thoughtworks.xstream*.jar"/>
      </fileset>
    </sort>
  </path>
  
  <target name="-defineTaskEclipse" if="natural.eclipse.home">
    <!-- define task     -->	
    <antcall target="-printTimestamp">
      <param name="message" value="start of defineTaskEclipse" />
    </antcall>
    <taskdef name="testsuite" 
             classname="com.softwareag.natural.unittest.ant.framework.TestSuiteTask" >
      <classpath refid="natural.ant.searchpath"/>
    </taskdef>
    <taskdef name="natantcrypt" 
             classname="com.softwareag.natural.unittest.ant.encryption.AntEncryptionTask" >
      <classpath refid="natural.ant.searchpath"/>
    </taskdef>
    <antcall target="-printTimestamp">
      <param name="message" value="end of defineTaskEclipse" />
    </antcall>
  </target>

  <target name="-defineTaskNoEclipse" unless="natural.eclipse.home">
    <!-- define task     -->	
    <antcall target="-printTimestamp">
      <param name="message" value="start of defineTaskNoEclipse" />
    </antcall>
    <taskdef name="testsuite" 
             classname="com.softwareag.natural.unittest.ant.framework.TestSuiteTask" >
    </taskdef>
    <taskdef name="natantcrypt" 
             classname="com.softwareag.natural.unittest.ant.encryption.AntEncryptionTask" >
    </taskdef>
    <antcall target="-printTimestamp">
      <param name="message" value="end of defineTaskNoEclipse" />
    </antcall>
  </target>

  <target name="-printTimestamp" if="natural.ant.tstamp.format">
  	<tstamp>
        <format property="current.time" pattern="${natural.ant.tstamp.format}" />
  	</tstamp>
  	<echo message="TIMESTAMP: ${message} : ${current.time}" />
  </target>

  <target name="-init" depends="-printHeader,-setProperties,-initProperties, -setRootdir,-defineTaskEclipse,-defineTaskNoEclipse">
  </target>
    
  <target name="-printHeader">
      <echo message="*****************************************************************"/> 
      <echo message="*  ANT Natural Unit Test Script:"/> 
      <echo message="*  ${ant.file}"/> 
      <echo message="*****************************************************************"/> 
  </target>
    
      <target name="checkout" depends="-init,-rep_password,-svn_checkout,-cvs_checkout,-git_checkout"
               unless="natural.eclipse.running"
               description="performs a checkout of the sources from the corresponding versioning system">
      <!--  distinguish between SVN and CVS and GIT -->
	  </target>
	  
	  <target name="-svn_checkout" if="natural.ant.repository.type.svn" 
	                               unless="natural.eclipse.running">
	    <!-- initial checkout  -->
	      <antcall target="-printTimestamp">
	        <param name="message" value="start of checkout" />
	      </antcall>
	      <exec executable="svn" failonerror="${natural.ant.failonerror.internal}">
	       <arg value="checkout"/>
	       <arg value="--username"/>
	       <arg value="${natural.ant.repository.username}"/>
	       <arg value="--password"/>
	       <arg value="${internal.natural.ant.repository.password}"/>
	       <arg value="${natural.ant.repository.url}"/>
	       <arg value="${natural.ant.project.rootdir.active}/${natural.ant.project.name}"/>
	       <arg value="-r${natural.ant.repository.version}"/>
	      </exec>
	      <antcall target="-printTimestamp">
	        <param name="message" value="end of checkout" />
	      </antcall>
	  </target>  

	  <target name="-cvs_cvsroot" if="natural.ant.repository.type.cvs">
	    <property name="tmp.natural.cvsroot1" value="${natural.ant.repository.access.method}${natural.ant.repository.username}"/>
	    <condition property="tmp.natural.cvsroot2" value="${tmp.natural.cvsroot1}:${internal.natural.ant.repository.password}" else="${tmp.natural.cvsroot1}">
	      <and>
	        <isset property="internal.natural.ant.repository.password"/>
	        <not>
	          <equals arg1="${internal.natural.ant.repository.password}" arg2=""/>
	        </not>
	      </and>
	    </condition>
	    <property name="tmp.natural.cvsroot3" value="${tmp.natural.cvsroot2}${natural.ant.repository.url}"/>
	    <!--  finally set cvsroot -->
	    <property name="natural.ant.repository.cvsroot" value="${tmp.natural.cvsroot3}"/>
	  </target>

	  <target name="-cvs_checkout" if="natural.ant.repository.type.cvs" 
	                               unless="natural.eclipse.running"
	                               depends="-cvs_cvsroot">
	    <!-- initial checkout  -->
	      <antcall target="-printTimestamp">
	        <param name="message" value="start of checkout" />
	      </antcall>
	      <cvs cvsRoot="${natural.ant.repository.cvsroot}"
	           command="checkout -d &quot;${natural.ant.project.name}&quot;"
	           package="&quot;${natural.ant.repository.module}&quot;"
	           dest="${natural.ant.project.rootdir.active}"
	           tag="${natural.ant.repository.version}"
	      	   failonerror="${natural.ant.failonerror.internal}"
	       />
	      <antcall target="-printTimestamp">
	        <param name="message" value="end of checkout" />
	      </antcall>
	  </target>  

	  <target name="-git_checkout" if="natural.ant.repository.type.git" 
		                               unless="natural.eclipse.running">
	    <!-- initial checkout  -->
	      <antcall target="-printTimestamp">
	        <param name="message" value="start of checkout" />
	      </antcall>
	      <exec executable="git" failonerror="${natural.ant.failonerror.internal}">
	        <arg value="clone"/>
	        <arg value="--branch"/>
	        <arg value="${natural.ant.repository.version}"/>
	        <arg value="${natural.ant.repository.url}"/>
	        <arg value="${natural.ant.project.rootdir.active}"/>
	      </exec>
	      <antcall target="-printTimestamp">
	        <param name="message" value="end of checkout" />
	      </antcall>
	  </target>  
		  
	<!--		  
	  <target name="update" depends="-init,-checkProjectdir,-rep_password,-svn_update,-cvs_update,-git_update"
	          unless="natural.eclipse.running"
	          description="performs an incremental update on the sources from the versioning system">

	  </target>
 
	  <target name="-svn_update" if="natural.ant.repository.type.svn"
	                             unless="natural.eclipse.running">

	      <antcall target="-printTimestamp">
	        <param name="message" value="start of update" />
	      </antcall>
	      <exec executable="svn" failonerror="${natural.ant.failonerror.internal}">
	       <arg value="update"/>
	       <arg value="username"/>
	       <arg value="${natural.ant.repository.username}"/>
	       <arg value="password"/>
	       <arg value="${internal.natural.ant.repository.password}"/>
	       <arg value="${natural.ant.project.rootdir.active}/${natural.ant.project.name}"/>
	       <arg value="-r${natural.ant.repository.version}"/>
	      </exec>
	      <antcall target="-printTimestamp">
	        <param name="message" value="end of update" />
	      </antcall>
	  </target>
	  
	  <target name="-cvs_update" if="natural.ant.repository.type.cvs" 
	                             unless="natural.eclipse.running"
	                             depends="-cvs_cvsroot">

	      <antcall target="-printTimestamp">
	        <param name="message" value="start of update" />
	      </antcall>
	      <cvs cvsRoot="${natural.ant.repository.cvsroot}"
	           command="update -d"
	           dest="${natural.ant.project.rootdir.active}"
	      	   failonerror="${natural.ant.failonerror.internal}"
	       />
	      <antcall target="-printTimestamp">
	        <param name="message" value="end of update" />
	      </antcall>
	  </target>

	  <target name="-git_update" if="natural.ant.repository.type.git"
		                         unless="natural.eclipse.running">

	      <antcall target="-printTimestamp">
	        <param name="message" value="start of update" />
	      </antcall>
		  <exec executable="git" dir="${natural.ant.project.rootdir.active}" 
		  	    failonerror="${natural.ant.failonerror.internal}">
		    <arg value="pull"/>
	        <arg value="origin"/>
		  </exec>
	      <antcall target="-printTimestamp">
	        <param name="message" value="end of update" />
	      </antcall>
	  </target>
	-->

	  <target name="-rep_password">
	    <!-- repository passwords  -->
	    <natantcrypt input="natural.ant.repository.password" 
	                 encryption="natural.ant.project.password.encryption"
	                 output="internal.natural.ant.repository.password" />
	  </target>
  
  <target name="unittest" 
          depends="-init, -checkProjectdir"
          description="performs a Unit Testing with the current project">
    <testsuite failureProperty="is.unit.test.failure" 
        haltOnFailure="${natural.ant.failonerror}" 
        steplibs="${natural.ant.project.steplibs}"
        refProjects="${natural.ant.referenced.projects}"
        logtests="${natural.testing.ant.writehistory}" 
        name="${natural.ant.project.name}" 
        setProjectSteplibs="true">
      <connection 
      EnvironmentName="${natural.testing.ant.rpcenvname}"
      brokerID="${natural.testing.ant.brokerid}" 
      logon="${natural.testing.ant.logon}"
      address="${natural.testing.ant.srvaddr}"
      userID="${natural.testing.ant.exxuid}" 	
      password="${natural.testing.ant.exxpwd}"
      rpcUserID="${natural.testing.ant.rpcuid}"
      rpcPassword="${natural.testing.ant.rpcpwd}">
      </connection>	
      <!-- Run all the available unit tests from a folder -->
      <fileset dir="${natural.ant.project.rootdir.active}/${natural.ant.project.name}">
        <include name="**/*.nattst" />
        <include name="**/*.bsrvtst" />
        <include name="**/*.exttst" />
        <include name="/**/*.seqtst" />
      </fileset>
    </testsuite>
    <!--  refer to the build target -->
    <property name="natural.ant.build.done.internal" value="true"/>  	
  </target>
</project>
